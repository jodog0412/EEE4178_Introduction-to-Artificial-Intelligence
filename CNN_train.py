# -*- coding: utf-8 -*-
"""train.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14cbpiBMSoENaTq3K4ZYh4kioK4X0eISN
"""

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms

import matplotlib
import matplotlib.pyplot as plt
from matplotlib.pyplot import imshow

# Device Configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Load CIFAR10 data
train_data = torchvision.datasets.CIFAR10(root='./datasets',
                                        train=True,
                                        transform=transforms.ToTensor(),
                                        download=True)

# Adjust Dataset classes and channels
num_classes = 10
in_channel = 3
max_pool_kernel = 2

# Hyper-parameters
batch_size = 25
learning_rate = 0.005
num_epochs = 15

train_loader = torch.utils.data.DataLoader(dataset=train_data,
                                          batch_size=batch_size,
                                          shuffle=True)

class ConvNetStep(nn.Module):
  def __init__(self, num_classes=10):
    super(ConvNetStep, self).__init__()
    self.layer1 = nn.Sequential(
        nn.Conv2d(in_channels=in_channel, out_channels=8, kernel_size=5, stride=1, padding=2),
        nn.BatchNorm2d(num_features=8),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=max_pool_kernel)
    )
    self.layer2 = nn.Sequential(
        nn.Conv2d(in_channels=8, out_channels=16, kernel_size=5, stride=1, padding=2),
        nn.BatchNorm2d(num_features=16),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=max_pool_kernel)
    )
    self.layer3 = nn.Sequential(
        nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=2),
        nn.BatchNorm2d(num_features=32),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=max_pool_kernel)
    )
    self.fc1 = nn.Linear(in_features=32*4*4, out_features=128)
    self.fc2 = nn.Linear(in_features=128, out_features=32)
    self.fc3 = nn.Linear(in_features=32, out_features=num_classes)

  def forward1(self, x):
    x = self.layer1(x)
    return x
  
  def forward2(self, x):
    x = self.layer2(x)
    return x

  def forward3(self, x):
    x = self.layer3(x)
    return x

  def forward4(self, x):
    x = x.reshape(x.size(0),-1)
    return self.fc1(x)

  def forward5(self, x):
    return self.fc2(x)

  def forward6(self, x):
    return self.fc3(x)

  def forward(self, x):    # 실제 학습 시에는 이 함수만 사용
    x = self.layer1(x)  #3*32*32->8*16*16
    x = self.layer2(x) #8*16*16->16*8*8
    x = self.layer3(x) #16*8*8->32*4*4
    x = F.relu(x)
    x = x.reshape(x.size(0),-1) #32*4*4->512
    x = F.relu(self.fc1(x)) #512->128
    x = self.fc2(x) #128->32
    x=self.fc3(x) #32->10
    return x

model = ConvNetStep()

def image_show(tensor_image):
  image = tensor_image.reshape(tensor_image.size()[1], tensor_image.size()[2], tensor_image.size()[0])    # width x height
  imshow(image)

images, labels = next(iter(train_loader))
image1, label1 = images[0], labels[0]
image_show(image1)
plt.title(label1)

print(images.size())

model.eval()
output1 = model.forward1(images)
print(f"[ Layer1 ] input : {images.size()} --> output : {output1.size()}")
output2 = model.forward2(output1)
print(f"[ Layer2 ] input : {output1.size()} --> output : {output2.size()}")
output3 = model.forward3(output2)
print(f"[ Layer3 ] input : {output2.size()} --> output : {output3.size()}")
output4 = model.forward4(output3)
print(f"[ Layer4 ] input : {output3.size()} --> output : {output4.size()}")
output5 = model.forward5(output4)
print(f"[ Layer5 ] input : {output4.size()} --> output : {output5.size()}")
output6 = model.forward6(output5)
print(f"[ Layer6 ] input : {output5.size()} --> output : {output6.size()}")

model = ConvNetStep().to(device)
criterion = nn.CrossEntropyLoss()
optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)

total_step = len(train_loader)
total_loss = []
model.train()
for epoch in range(num_epochs):
  epoch_loss = []
  for i, (img, label) in enumerate(train_loader):
    # Assign Tensors to Configures Devices (gpu)
    img = img.to(device)
    label = label.to(device)

    # Forward propagation
    outputs = model(img)

    # Get Loss, Compute Gradient, Update Parameters
    loss = criterion(outputs, label)
    optimizer.zero_grad()
    loss.backward()
    optimizer.step()

    epoch_loss.append(loss.detach().cpu().numpy())
    # Print Loss
    if i % 1000 == 0 or (i+1)==len(train_loader):
      print('Epoch [{}/{}], Step [{}/{}], Loss: {:.4f}'.format(epoch+1, num_epochs, i+1, len(train_loader), loss.item()))
  total_loss.append(np.mean(epoch_loss))
  print(f"epoch{i} loss: {np.mean(epoch_loss)}")

plt.plot(total_loss)
plt.title("MNIST CNN loss example")
plt.show()

torch.save(model.state_dict(),"/content/drive/MyDrive/Colab Notebooks/[EEE4178] 인공지능개론/my_model.pth")   # model의 weight 정보 만을 저장



