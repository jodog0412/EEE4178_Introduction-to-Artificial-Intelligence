# -*- coding: utf-8 -*-
"""test.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tB7ccu0BeEO608klqOJmzclobmtJqcBo
"""

import numpy as np
import torch
import torch.nn as nn
import torch.nn.functional as F
import torchvision
import torchvision.transforms as transforms

# Device Configuration
device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')

# Load CIFAR10 data
test_data = torchvision.datasets.CIFAR10(root='./datasets',
                                        train=False,
                                        transform=transforms.ToTensor(),
                                        download=True)

# Adjust Dataset classes and channels
num_classes = 10
in_channel = 3
max_pool_kernel = 2
# Hyper-parameters
batch_size = 25

test_loader = torch.utils.data.DataLoader(dataset=test_data,
                                          batch_size=batch_size,
                                          shuffle=True)

class ConvNetStep(nn.Module):
  def __init__(self, num_classes=10):
    super(ConvNetStep, self).__init__()
    self.layer1 = nn.Sequential(
        nn.Conv2d(in_channels=in_channel, out_channels=8, kernel_size=5, stride=1, padding=2),
        nn.BatchNorm2d(num_features=8),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=max_pool_kernel)
    )
    self.layer2 = nn.Sequential(
        nn.Conv2d(in_channels=8, out_channels=16, kernel_size=5, stride=1, padding=2),
        nn.BatchNorm2d(num_features=16),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=max_pool_kernel)
    )
    self.layer3 = nn.Sequential(
        nn.Conv2d(in_channels=16, out_channels=32, kernel_size=5, stride=1, padding=2),
        nn.BatchNorm2d(num_features=32),
        nn.ReLU(),
        nn.MaxPool2d(kernel_size=max_pool_kernel)
    )
    self.fc1 = nn.Linear(in_features=32*4*4, out_features=128)
    self.fc2 = nn.Linear(in_features=128, out_features=32)
    self.fc3 = nn.Linear(in_features=32, out_features=num_classes)

  def forward1(self, x):
    x = self.layer1(x)
    return x
  
  def forward2(self, x):
    x = self.layer2(x)
    return x

  def forward3(self, x):
    x = self.layer3(x)
    return x

  def forward4(self, x):
    x = x.reshape(x.size(0),-1)
    return self.fc1(x)

  def forward5(self, x):
    return self.fc2(x)

  def forward6(self, x):
    return self.fc3(x)

  def forward(self, x):    # 실제 학습 시에는 이 함수만 사용
    x = self.layer1(x)  #3*32*32->8*16*16
    x = self.layer2(x) #8*16*16->16*8*8
    x = self.layer3(x) #16*8*8->32*4*4
    x = F.relu(x)
    x = x.reshape(x.size(0),-1) #32*4*4->512
    x = F.relu(self.fc1(x)) #512->128
    x = self.fc2(x) #128->32
    x=self.fc3(x) #32->10
    return x

model = ConvNetStep()

test_model = ConvNetStep().to(device)
test_model.load_state_dict(torch.load("/content/drive/MyDrive/Colab Notebooks/[EEE4178] 인공지능개론/my_model.pth"))   # test_model이라는 모델 안에 앞서 학습한 weight 정보가 담기게 된다.
test_model.eval()

with torch.no_grad():
  correct = 0
  
  for img, lab in test_loader:
    img = img.to(device)
    lab = lab.to(device)
    out = test_model(img)
    _, pred = torch.max(out.data, 1)
    correct += (pred == lab).sum().item()

  print("Accuracy of the network on the {} test images: {}%".format(len(test_loader)*batch_size, 100 * correct / (len(test_loader) * batch_size)))

